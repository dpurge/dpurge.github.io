[{"id":0,"href":"/docs/devops/azure/exploring/","title":"Exploring","section":"Azure","content":" Exploring Azure resources # List subscription and tenant # az account show --query \u0026#34;{subscriptionId:id, tenantId:tenantId}\u0026#34; -o table Create service principal for RBAC # az ad sp create-for-rbac --role Contributor --name my-name-001 --scope /subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx Find VM images # az vm image list-offers --publisher Canonical --location westeurope -o table az vm image list-skus --publisher Canonical --offer 0001-com-ubuntu-server-jammy --location westeurope -o table az vm image list --all --publisher Canonical --offer 0001-com-ubuntu-server-jammy --sku 22_04-lts --location westeurope -o table Refer to this image: Canonical:0001-com-ubuntu-server-jammy:22_04-lts\nList public and private IP # For current subscription:\naz vm list -d --query \u0026#34;[].{Name:name, PublicIPs:publicIps, PrivateIPs:privateIps}\u0026#34; -o table For all subscriptions:\nfor i in `az account list --query \u0026#34;[].{id:id}\u0026#34; --output tsv`; do az account set --subscription $i; az vm list -d --query \u0026#34;[].{Name:name, PublicIPs:publicIps, PrivateIPs:privateIps}\u0026#34; --output tsv; done "},{"id":1,"href":"/docs/devops/git/configuration/","title":"Configuration","section":"Git","content":" Configuration of git # Username and email # git config --global user.name \u0026#34;D. Purge\u0026#34; git config --global user.email \u0026#34;my@email.com\u0026#34; SSH checkouts from Azure DevOps # Generate SSH keypair:\nssh-keygen -t rsa Full parameters:\nssh-keygen \\ -m PEM \\ -t rsa \\ -b 4096 \\ -C \u0026#34;user@server.example.com\u0026#34; \\ -f ~/.ssh/mykeys/privatekey \\ -N passphrase Parameters:\n-m PEM = format key as PEM -t RSA = type of the key, RSA format -b 4096 = number of bits in the key, 4096 bits -C \u0026ldquo; user@server.example.com\u0026rdquo; = a comment appended at the end of the public key, to identify it -f ~/.ssh/mykeys/privatekey = the filename of the private key filet, a corresponding public key file appended with .pub is generated in the same directory which must exist -N passphrase = a passphrase used to access the private key file Add configuration in ~/.ssh/config:\nHost ssh.dev.azure.com\rIdentityFile ~/.ssh/id_rsa\rIdentitiesOnly yes\rUser git\rPubkeyAcceptedAlgorithms +ssh-rsa\rHostkeyAlgorithms +ssh-rsa "},{"id":2,"href":"/docs/devops/wsl/installation/","title":"Installation","section":"WSL","content":" Installation of WSL # WSL2 # Enable-WindowsOptionalFeature -Online -NoRestart -FeatureName Microsoft-Windows-Subsystem-Linux Enable-WindowsOptionalFeature -Online -NoRestart -FeatureName VirtualMachinePlatform Invoke-WebRequest https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi -OutFile c:\\wsl_update_x64.msi -UseBasicParsing Reboot and install c:\\wsl_update_x64.msi.\nSet WSL2 as default: wsl --set-default-version 2\nUbuntu 20.04 # Invoke-WebRequest -Uri https://aka.ms/wslubuntu2004 -OutFile c:\\ubuntu2004.appx -UseBasicParsing Add-AppxPackage c:\\ubuntu2004.appx # DISM.EXE /Online /Add-ProvisionedAppxPackage /PackagePath:c:\\\\ubuntu2004.appx /SkipLicense --AllUsers Start Ubuntu 20.04 console to install the base system, and then run:\nsudo apt update sudo apt upgrade Docker in Ubuntu 20.04 # sudo apt install --no-install-recommends apt-transport-https ca-certificates curl gnupg2 net-tools source /etc/os-release curl -fsSL https://download.docker.com/linux/${ID}/gpg | sudo apt-key add - echo \u0026#34;deb [arch=amd64] https://download.docker.com/linux/${ID} ${VERSION_CODENAME} stable\u0026#34; | sudo tee /etc/apt/sources.list.d/docker.list sudo apt update sudo apt install docker-ce docker-ce-cli containerd.io docker-compose Import Ubuntu image from docker # Download image: Invoke-WebRequest https://raw.githubusercontent.com/tianon/docker-brew-ubuntu-core/fbca80af7960ffcca085d509c20f53ced1697ade/kinetic/ubuntu-kinetic-oci-amd64-root.tar.gz -OutFile C:\\ubuntu-kinetic-oci-amd64-root.tar.gz -UseBasicParsing Import image: wsl --import jdp-ubuntu C:\\dat\\WSL\\jdp-ubuntu C:\\ubuntu-kinetic-oci-amd64-root.tar.gz Update system: apt-get update Import Arch image from docker # Download image: Invoke-WebRequest https://gitlab.archlinux.org/archlinux/archlinux-docker/-/package_files/2816/download -OutFile C:\\arch-base-20220704.0.66039.tar.zst -UseBasicParsing Import image: wsl --import jdp-arch C:\\dat\\WSL\\jdp-arch C:\\arch-base-20220704.0.66039.tar Uncomment locale file: /etc/locale.gen Generate locale: locale-gen Initialize key: pacman-key --init Update system: pacman -Syu Mount host directory # Create directory in WSL: mkdir /src\nEdit /etc/fstab and add line: C:/src /src drvfs defaults 0 0\nReload the fstab file: sudo mount -a\n"},{"id":3,"href":"/docs/programming/awk/basics/","title":"Basics","section":"Awk","content":" Awk basics # "},{"id":4,"href":"/docs/programming/bash/basics/","title":"Basics","section":"Bash","content":" Bash basics # "},{"id":5,"href":"/docs/programming/csharp/basics/","title":"Basics","section":"C#","content":" C# Basics # "},{"id":6,"href":"/docs/programming/go/basics/","title":"Basics","section":"Go","content":" Go Basics # "},{"id":7,"href":"/docs/programming/powershell/basics/","title":"Basics","section":"Powershell","content":" Powershell basics # "},{"id":8,"href":"/docs/programming/python/basics/","title":"Basics","section":"Python","content":" Python basics # Application structure # TODO\nClass structure # TODO\nExecutable module # TODO\n"},{"id":9,"href":"/docs/programming/python/environment/","title":"Environment","section":"Python","content":" Virtual environment # TODO\nVenv # Create and activate virtual environment:\nBash echo Hello Powershell python -m venv .venv .venv\\Scripts\\activate.ps1 Cmd echo Hello Upgrade pip and install requirements.txt:\npython -m pip install --upgrade pip pip install -r requirements.txt Deactivate virtual environment:\ndeactivate Pipenv # TODO\n"}]