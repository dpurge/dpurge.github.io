<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on Notebook</title><link>https://dpurge.github.io/docs/programming/go/</link><description>Recent content in Go on Notebook</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://dpurge.github.io/docs/programming/go/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://dpurge.github.io/docs/programming/go/basics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dpurge.github.io/docs/programming/go/basics/</guid><description> Go Basics # Project template # Set up:
mkdir example-project cd ./example-project go mod init ./.gitignore:
./Makefile:
.PHONY: clean build test clean: echo &amp;#34;Not implemented&amp;#34; build: echo &amp;#34;Not implemented&amp;#34; test: echo &amp;#34;Not implemented&amp;#34; install: echo &amp;#34;Not implemented&amp;#34; ./main.go:
package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(&amp;#34;Hello, World!&amp;#34;) } Run project:
go run . Taskfile # Task file home Task file repository</description></item><item><title/><link>https://dpurge.github.io/docs/programming/go/cgi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dpurge.github.io/docs/programming/go/cgi/</guid><description> CGI # Simple CGI app # package main import ( &amp;#34;bytes&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; &amp;#34;time&amp;#34; ) func main() { var buf bytes.Buffer fmt.Fprintf(&amp;amp;buf, &amp;#34;Time at %s: %s\n&amp;#34;, os.Getenv(&amp;#34;SERVER_NAME&amp;#34;), time.Now().Format(time.RFC1123)) fmt.Println(&amp;#34;Content-type: text/plain&amp;#34;) fmt.Printf(&amp;#34;Content-Length: %d\n\n&amp;#34;, buf.Len()) buf.WriteTo(os.Stdout) }</description></item><item><title/><link>https://dpurge.github.io/docs/programming/go/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dpurge.github.io/docs/programming/go/installation/</guid><description>Installation # Linux ```shsudo apt updatesudo apt upgrade -ysudo apt install golang -y```Windows $go_version = &amp;quot;1.21.4&amp;quot;$go_archive = &amp;quot;https://dl.google.com/go/go${go_version}.windows-amd64.zip&amp;quot;Invoke-WebRequest -Uri $go_archive -OutFile &amp;quot;${pwd}/go${go_version}.windows-amd64.zip&amp;quot;Add-Type -Assembly System.IO.Compression.FileSystem[System.IO.Compression.ZipFile]::ExtractToDirectory(&amp;quot;${pwd}/go${go_version}.windows-amd64.zip&amp;quot;, &amp;quot;${pwd}&amp;quot;)Remove-Item -Path &amp;quot;${pwd}/go${go_version}.windows-amd64.zip&amp;quot;$path_list = [System.Environment]::GetEnvironmentVariable('PATH', 'Machine') -split ';'if ($path_list -notcontains &amp;quot;${pwd}\go\bin&amp;quot;) {$path_string = ($path_list + &amp;quot;${pwd}\go\bin&amp;quot;) -join ';'[System.Environment]::SetEnvironmentVariable('PATH', $path_string, 'Machine')}Check version: go version</description></item></channel></rss>